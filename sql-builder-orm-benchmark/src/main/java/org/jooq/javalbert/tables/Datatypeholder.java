/*
 * This file is generated by jOOQ.
*/
package org.jooq.javalbert.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.javalbert.Keys;
import org.jooq.javalbert.Public;
import org.jooq.javalbert.tables.records.DatatypeholderRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Datatypeholder extends TableImpl<DatatypeholderRecord> {

    private static final long serialVersionUID = 196554032;

    /**
     * The reference instance of <code>PUBLIC.DATATYPEHOLDER</code>
     */
    public static final Datatypeholder DATATYPEHOLDER = new Datatypeholder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatatypeholderRecord> getRecordType() {
        return DatatypeholderRecord.class;
    }

    /**
     * The column <code>PUBLIC.DATATYPEHOLDER.ID</code>.
     */
    public final TableField<DatatypeholderRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_0E7CBAD7_93FC_425B_A8C2_FE4534FF3855)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.DATATYPEHOLDER.INT_VAL</code>.
     */
    public final TableField<DatatypeholderRecord, Integer> INT_VAL = createField("INT_VAL", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DATATYPEHOLDER.BOOLEAN_VAL</code>.
     */
    public final TableField<DatatypeholderRecord, Boolean> BOOLEAN_VAL = createField("BOOLEAN_VAL", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DATATYPEHOLDER.BIGINT_VAL</code>.
     */
    public final TableField<DatatypeholderRecord, Long> BIGINT_VAL = createField("BIGINT_VAL", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DATATYPEHOLDER.DECIMAL_VAL</code>.
     */
    public final TableField<DatatypeholderRecord, BigDecimal> DECIMAL_VAL = createField("DECIMAL_VAL", org.jooq.impl.SQLDataType.DECIMAL.precision(13, 2), this, "");

    /**
     * The column <code>PUBLIC.DATATYPEHOLDER.DOUBLE_VAL</code>.
     */
    public final TableField<DatatypeholderRecord, Double> DOUBLE_VAL = createField("DOUBLE_VAL", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DATATYPEHOLDER.REAL_VAL</code>.
     */
    public final TableField<DatatypeholderRecord, Float> REAL_VAL = createField("REAL_VAL", org.jooq.impl.SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DATATYPEHOLDER.DATE_VAL</code>.
     */
    public final TableField<DatatypeholderRecord, Date> DATE_VAL = createField("DATE_VAL", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>PUBLIC.DATATYPEHOLDER.TIMESTAMP_VAL</code>.
     */
    public final TableField<DatatypeholderRecord, Timestamp> TIMESTAMP_VAL = createField("TIMESTAMP_VAL", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>PUBLIC.DATATYPEHOLDER.VARCHAR_VAL</code>.
     */
    public final TableField<DatatypeholderRecord, String> VARCHAR_VAL = createField("VARCHAR_VAL", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>PUBLIC.DATATYPEHOLDER</code> table reference
     */
    public Datatypeholder() {
        this("DATATYPEHOLDER", null);
    }

    /**
     * Create an aliased <code>PUBLIC.DATATYPEHOLDER</code> table reference
     */
    public Datatypeholder(String alias) {
        this(alias, DATATYPEHOLDER);
    }

    private Datatypeholder(String alias, Table<DatatypeholderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Datatypeholder(String alias, Table<DatatypeholderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DatatypeholderRecord, Long> getIdentity() {
        return Keys.IDENTITY_DATATYPEHOLDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DatatypeholderRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DatatypeholderRecord>> getKeys() {
        return Arrays.<UniqueKey<DatatypeholderRecord>>asList(Keys.CONSTRAINT_C);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Datatypeholder as(String alias) {
        return new Datatypeholder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Datatypeholder rename(String name) {
        return new Datatypeholder(name, null);
    }
}
